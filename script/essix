#!/bin/bash

usage ()
{
	echo
	echo "Usage:"
	echo
	echo "$(basename $0) init PACKAGE"
	echo "  Initialise a new essix app in the given new directory under \$GOPATH."
	echo
	echo "$(basename $0) cert DOMAIN [EMAIL]"
	echo "  Generate a TLS certificate for the given domain."
	echo "  Certificate gets saved in ./resources/certificates"
	echo "  Without EMAIL,"
	echo "    a self-signed certificate is produced."
	echo "  With EMAIL,"
	echo "    a trusted certificate is produced through LetsEncrypt."
	echo "    The current LetsEncrypt approach relies on a DNS configuration on DigitalOcean,"
	echo "    and requires the DIGITALOCEAN_ACCESS_TOKEN environment variable."
	echo
	echo "$(basename $0) nodes [OPTIONS] COMMAND SWARM"
	echo "  Create a Docker Swarm Mode swarm, and manage its nodes."
	echo "  Run '$(basename $0) nodes help' for more information."
	echo
	echo "$(basename $0) r [OPTIONS] [COMMAND] SWARM"
	echo "  Create a RethinkDB cluster on a swarm, and/or start its web admin."
	echo "  Run '$(basename $0) r help' for more information."
	echo
	echo "$(basename $0) [OPTIONS] build REPO TAG [SWARM]"
	echo "  Format & compile go sources in the current directory, and build a Docker"
	echo "  image named REPO/APP:TAG"
	echo "  APP is the current directory's name, is also the service name."
	echo "  Without SWARM,"
	echo "    the OPTIONS are ignored, and the image is built locally,"
	echo "    then pushed to the repository. Default repository is Docker Hub."
	echo "  With SWARM,"
	echo "    the image is built remotely on each of the swarm's nodes,"
	echo "    and the service is run there, with the given OPTIONS."
	echo
	echo "$(basename $0) [OPTIONS] run REPO TAG SWARM"
	echo "  Run a service from an image on a swarm."
	echo "  Options:"
    echo "    -e key=value ...  environment variables"
    echo "    -r replicas       number of replicas to run (default=1)"
	echo
	echo "$(basename $0) help"
	echo "  Display this message."
	echo
	echo
	echo "You'll want to have these baseline tools ready:"
	echo "  - Bash"
	echo "  - Git"
	echo "  - Go"
	echo "  - Docker"
	echo "  - Docker Machine"
	echo "  - VirtualBox"
	echo "  - An account with Docker Hub"
	echo "  - An account with DigitalOcean"
	echo
	echo "\$GOPATH environment variable is set to: '${GOPATH}'"
	echo
	echo
	echo "Examples:"
	echo
    echo "  \$ $(basename $0) init github.com/essix/newapp"
    echo "      Initialises a base structure for an Essix app in ${GOPATH}/github.com/essix/newapp."
	echo
    echo "  \$ $(basename $0) cert dev.appsite.com"
    echo "      Generates a self-signed TLS certificate for the given domain."
	echo
    echo "  \$ export DIGITALOCEAN_ACCESS_TOKEN=\"94dt7972b863497630s73012n10237xr1273trz92t1\""
    echo "  \$ $(basename $0) cert www.appsite.com essix@appsite.com"
    echo "      Generates a trusted TLS certificate for the given domain."
	echo
    echo "  \$ $(basename $0) nodes -m 1 -w 2 -H dev.appsite.com create dev"
    echo "      Creates swarm dev on VirtualBox, with one manager node, and 2 worker"
    echo "      nodes. Adds hostname dev.appsite.com to /etc/hosts, resolving to the"
    echo "      manager node's ip address."
	echo
    echo "  \$ $(basename $0) nodes -m 1 -d digitalocean -F create www"
    echo "      Creates a one-node swarm www on DigitalOcean, and enables a firewall on it."
    echo "  \$ $(basename $0) nodes -w 1 -d digitalocean -F create www"
    echo "      Adds a worker node (with firewall) to swarm www on DigitalOcean."
	echo
    echo "  \$ $(basename $0) r create dev"
    echo "      Creates a RethinkDB cluster on swarm dev, and opens the cluster's"
    echo "      administrator web page."
	echo
    echo "  \$ $(basename $0) r dev"
    echo "      Opens the dev swarm RethinkDB cluster's administrator web page."
	echo
    echo "  \$ $(basename $0) build essix 0.2"
    echo "      Locally builds the essix/APP:0.2 image, and pushes it to the repository."
    echo "  \$ $(basename $0) run -e DOMAIN=www.appsite.com -r 6 essix 0.2 www"
    echo "      Starts 6 replicas of the service on swarm www, using image essix/APP:0.2,"
    echo "      which is downloaded from the repository, if not found locally."
	echo
    echo "  \$ $(basename $0) -e DOMAIN=dev.appsite.com build essix 0.3 dev"
    echo "      Builds image essix/APP:0.3 on swarm dev's nodes, and runs the service"
    echo "      on dev, with the given DOMAIN environment variable set."
	echo
}

while getopts "e:r:s:h" opt; do
    case $opt in
        e  ) ENVS+=("$OPTARG");;
        r  ) REPLICAS="$OPTARG";;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
shift $((OPTIND -1))

REPLICAS="${REPLICAS-1}"

COMMAND="${1}"

REPO="${2}"
TAG="${3}"
SWARM="${4}"
SERVICE="$(basename ${PWD})"
IMAGE="${REPO}/${SERVICE}:${TAG}"

essix="${GOPATH}/src/github.com/wscherphof/essix"
swarmmode="${essix}/vendor/github.com/wscherphof/rethinkswarmmode"
build="${swarmmode}/go/build"
nodes="${swarmmode}/nodes"
r="${swarmmode}/rethinkdb/r"
app="${swarmmode}/app"

run ()
{
    environment=""
    for env in "${ENVS[@]}"; do
        environment="${environment} -e ${env}"
    done
	${app} -p 80 -p 443 ${environment} -r ${REPLICAS} ${SERVICE} ${IMAGE} ${SWARM}
}

force ()
{
	$*
	code=$?
	if [ "$code" != "0" ]; then
		exit $code
	fi
}

case "${COMMAND}" in

init)
	PACKAGE="${2}"
	directory="${GOPATH}/src/${PACKAGE}"
	if [ -e "${directory}" ]; then
		echo "Path '${directory}' already exists."
		exit 1
	fi
	force go get github.com/kardianos/govendor
	echo "* generating files..."
	cp -rf "${essix}/app" "${directory}"
	escaped=$(echo "${PACKAGE}" | sed -E 's/\/+/\\\//g')
	sed -i.bak "s/.*\"<messages>\"/\"${escaped}\/messages\"/" "${directory}/main.go"
	sed -i.bak "s/.*\"<routes>\"/\"${escaped}\/routes\"/" "${directory}/main.go"
	sed -i.bak "s/.*\"<routes\/example>\"/\"${escaped}\/routes\/example\"/" "${directory}/routes/example.go"
	sed -i.bak "s/.*\"<model>\"/\"${escaped}\/model\"/" "${directory}/routes/example/profile.go"
	cd ${directory}
	rm $(find . -name '*.go.bak')
	echo "* fetching dependencies..."
	govendor init
	govendor add +external
	govendor fmt +local 1>/dev/null
	echo "* package inited in '${directory}'"
;;

cert)
	DOMAIN="${2}"
	EMAIL="${3}"
	resources="${PWD}/resources"
	if [ ! "${DOMAIN}" ]; then
		usage; exit 1
	elif [ ! -d "${resources}" ]; then
		echo "Directory not found: '${resources}'"
		exit 1
	elif [ "${EMAIL}" ]; then
		if [ "${DIGITALOCEAN_ACCESS_TOKEN}" = "" ]; then
			echo "Environment variable unset: DIGITALOCEAN_ACCESS_TOKEN"
			echo "Run 'export DIGITALOCEAN_ACCESS_TOKEN=<yourtoken>'"
			exit 1
		fi
		echo "* requesting trusted certificate for DOMAIN ${DOMAIN} ..."
		docker run --rm -v "${resources}:/.lego" \
		-e "DO_AUTH_TOKEN=${DIGITALOCEAN_ACCESS_TOKEN}" \
		xenolf/lego -a --dns=digitalocean \
		--email="${EMAIL}" \
		--domains="${DOMAIN}" \
		run
	else
		if [ ! "${GOROOT}" ]; then
			GOROOT="$(dirname $(which go))/.."
		fi
		mkdir -p "${resources}/certificates"
		cd "${resources}/certificates"
		force go run ${GOROOT}/src/crypto/tls/generate_cert.go --host ${DOMAIN} &>/dev/null
		mv cert.pem "$DOMAIN.crt"
		mv key.pem "$DOMAIN.key"
		echo "* saved self-signed certificate for DOMAIN ${DOMAIN}"
	fi
;;

nodes)
	shift 1
	${nodes} $*
;;

r)
	shift 1
	${r} $*
;;

build)
	force mkdir -p ./.merge/resources
	force cp -rf ${essix}/resources/ ./.merge/resources/
	force cp -rf ./resources/ ./.merge/resources/

	force ${build} -e DB_NAME=essix -e DB_ADDRESS=db1 -p 80 -p 443 -a ./.merge/resources . ${IMAGE} ${SWARM}

	rm -rf ./.merge 2>/dev/null

	if [ "$SWARM" ]; then
		run
	fi
;;

run)
	if [ "$TAG" -a "$SWARM" ]; then
		run
	else
		usage; exit 1
	fi
;;

help)
	usage; exit 0
;;

*)
	usage; exit 1
;;

esac
