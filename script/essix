#!/bin/bash
set -x

usage ()
{
	echo
	echo "Command:"
	echo "$(basename $0) $*"
	echo
	echo "Usage:"
	echo
	echo "$(basename $0) init PACKAGE"
	echo "  Initialise a new essix app in the given new directory."
	echo
	echo "$(basename $0) [OPTIONS] build REPO TAG [SWARM]"
	echo "  Format & compile go sources in the current directory, and build a"
	echo "  Docker image named REPO/APP:TAG, where APP is the current directory's"
	echo "  name, which is also used to name the service."
	echo "  Without the SWARM argument, the image is built locally,"
	echo "  and pushed to the repository."
	echo "  With the SWARM argument, the image is built remotely"
	echo "  on each of the swarm's nodes, and the service is run there."
	echo
	echo "$(basename $0) [OPTIONS] run REPO TAG SWARM"
	echo "  Run a service from an image on a swarm."
	echo
	echo "$(basename $0) help"
	echo "  Display this message."
	echo
	echo "Options:"
    echo "  -e key=value ...  environment variables"
    echo "  -r replicas       number of replicas to run (default=1)"
	echo
	echo "Examples:"
    echo "  \$ $(basename $0) -e DOMAIN=dev.essix.com build essix 0.2 dev"
    echo "      Builds image essix/APP:0.2 on swarm dev's nodes, and runs"
    echo "      service on dev, with the given environment variable set."
    echo "  \$ $(basename $0) -e DOMAIN=www.essix.com build essix 0.2"
    echo "      Locally builds the essix/APP:0.2 image,"
    echo "      and pushes it to the repository."
    echo "  \$ $(basename $0) run -r 6 essix 0.2 www"
    echo "      Starts 6 replicas of the service on swarm www, using image essix/APP:0.2,"
    echo "      which is downloaded from the repository, if not found locally."
	echo
}

while getopts "e:r:s:h" opt; do
    case $opt in
        e  ) ENVS+=("$OPTARG");;
        r  ) REPLICAS="$OPTARG";;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
shift $((OPTIND -1))

REPLICAS="${REPLICAS-1}"

COMMAND="${1}"
PACKAGE="${2}"
REPO="${2}"
TAG="${3}"
SWARM="${4}"

SERVICE="$(pwd | awk -F "/" '{print $NF}')"
IMAGE="${REPO}/${SERVICE}:${TAG}"

essix="${GOPATH}/src/github.com/wscherphof/essix"
swarmmode="${essix}/vendor/github.com/wscherphof/rethinkswarmmode"
build="${swarmmode}/go/build"
app="${swarmmode}/app"

run ()
{
    environment=""
    for env in "${ENVS[@]}"; do
        environment="${environment} -e ${env}"
    done
	${app} -p 80 -p 443 ${environment} -r ${REPLICAS} ${SERVICE} ${IMAGE} ${SWARM}
}

if [ "$COMMAND" = "init" ]; then
	if [ -e "${GOPATH}/src/${PACKAGE}" ]; then
		echo "Directory \"${GOPATH}/src/${PACKAGE}\" already exists."
		exit 1
	fi
	cp -rf "${essix}/app" "${GOPATH}/src/${PACKAGE}"
	escaped=$(echo "${PACKAGE}" | sed -E 's/\/+/\\\//g')
	sed -i.bak "s/.*\"<messages>\"/\"${escaped}\/messages\"/" "${GOPATH}/src/${PACKAGE}/main.go"
elif [ "$COMMAND" = "build" ]; then
	force ()
	{
		$*
		code=$?
		if [ "$code" != "0" ]; then
			exit $code
		fi
	}

	force mkdir -p ./.merge/resources
	force cp -rf ${essix}/resources/ ./.merge/resources/
	force cp -rf ./resources/ ./.merge/resources/

	force ${build} -p 80 -p 443 -a ./.merge/resources . ${IMAGE} ${SWARM}

	rm -rf ./.merge 2>/dev/null

	if [ "$SWARM" ]; then
		run
	fi
elif [ "$COMMAND" = "run" ]; then
	if [ "$TAG" -a "$SWARM" ]; then
		run
	else
		usage; exit 1
	fi
elif [ "$COMMAND" = "help" ]; then
	usage; exit
else
	usage; exit 1
fi
