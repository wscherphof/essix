#!/bin/bash

usage ()
{
	echo
	echo "Usage: $(basename $0) [OPTIONS] SOURCEDIR IMAGE [SWARM]"
	echo
	echo "Formats & compile go sources, and build a Docker image"
	echo
	echo "SOURCEDIR  directory containing the sources to compile"
	echo "IMAGE      repo/name:tag identifying the image"
	echo "SWARM      swarm on which nodes to build the image (instead of building locally, then pushing to reporitory)"
	echo
	echo "Options:"
	echo "  -e key=value ...  ENV variables for the image"
	echo "  -p port ...       ports for the image to EXPOSE"
	echo "  -a file ...       files or directories to ADD to the image's / folder (path relative to SOURCEDIR)"
	echo "  -A treeish        git branch/tag of the complete SOURCEDIR to ADD to the image's / folder"
	echo
}

while getopts "e:p:a:A:h" opt; do
    case $opt in
        e  ) ENVS+=("$OPTARG");;
        p  ) PORTS+=("$OPTARG");;
        a  ) ADDS+=("$OPTARG");;
        A  ) TREEISH="$OPTARG";;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
shift $((OPTIND -1))

SOURCEDIR="$1"
TAG="$2"
SWARM="$3"

continue ()
{
	if [ "$?" != "0" ]; then
		exit $?
	fi
}

pushd "$SOURCEDIR" 1>/dev/null
continue

echo "* formatting source code..."
gofmt -s -w .
continue

echo "* compiling..."
# cf. https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07#.wmlq1nj3d
CGO_ENABLED=0 GOOS=linux go build -a -tags netgo -ldflags '-w' .
continue

BINARY="$(pwd | awk -F "/" '{print $NF}')" # go build names the binary after the source's subdirectory

echo "FROM scratch" > ./Dockerfile
echo "ADD ${BINARY} /" >> ./Dockerfile
echo "ENTRYPOINT [\"/${BINARY}\"]" >> ./Dockerfile

if [ "${ENVS}" ]; then
	echo "ENV ${ENVS[@]}" >> ./Dockerfile
fi

if [ "${PORTS}" ]; then
	echo "EXPOSE ${PORTS[@]}" >> ./Dockerfile
fi

if [ "${TREEISH}" ]; then
	echo "ADD archive.tar.gz /" >> ./Dockerfile
	git archive --format tar.gz -o archive.tar.gz ${TREEISH} .
fi

if [ "${SWARM}" ]; then
	# Build on all nodes, skipping the push to the repository.
	# Dirty, but quick.
	for add in "${ADDS[@]}"; do
		echo "ADD \"$(basename ${add})\"" \"/$(basename ${add})\" >> ./Dockerfile
	done
	for type in worker manager
	do
		for (( i=1; ; i++ ))
		do
			node="${SWARM}-${type}-${i}"
			status=$(docker-machine status $node 2>/dev/null)
			if [ "$?" != "0" ]; then
				break
			elif [ "$status" != "Running" ]; then
				echo "* WARNING: $node is not running"
			else
				echo "* building image on $node..."
				docker-machine ssh $node mkdir ${BINARY}
				dir="$(docker-machine ssh $node pwd)/${BINARY}"
				if [ "${TREEISH}" ]; then
					docker-machine scp ./archive.tar.gz ${node}:${dir} 1>/dev/null
				fi
				docker-machine scp ./${BINARY} ${node}:${dir} 1>/dev/null
				docker-machine scp ./Dockerfile ${node}:${dir} 1>/dev/null
				for add in "${ADDS[@]}"; do
					docker-machine scp -r "${add}" ${node}:${dir} 1>/dev/null
				done
				docker-machine ssh $node sudo docker build -t ${TAG} ${dir}
				docker-machine ssh $node rm -rf ${BINARY}
			fi
		done
	done
else
	# Build locally and use the repository for shipping the image to the nodes.
	# Pretty, but slow.
	for add in "${ADDS[@]}"; do
		echo "ADD \"${add}\" \"/$(basename ${add})\"" >> ./Dockerfile
	done
	echo "* building image..."
	docker build -t ${TAG} .
	echo "* pushing image..."
	docker push ${TAG}
fi
rm ./${BINARY} ./Dockerfile ./archive.tar.gz 2>/dev/null

popd 1>/dev/null
