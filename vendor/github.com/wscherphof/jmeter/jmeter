#!/bin/bash

usage ()
{
	echo
	echo "Manage Apache JMeter (distributed) load tests."
	echo
	echo "Prerequitites:"
	echo "  - Docker & Docker Machine installed: https://docs.docker.com/machine/"
	echo "  - A test plan definition .jmx file created with JMeter 3.2: http://jmeter.apache.org/"
	echo
	echo "Usage:"
	echo
	echo "$(basename $0) [OPTIONS] run JMX MACHINE [REMOTE_MACHINE...]"
	echo "  Run the given test in non-gui mode, locally or remote, generating"
	echo "  a dashboard report."
	echo "  JMX                 Path to the .jmx file."
	echo "  MACHINE             The docker-machine that should run the test."
	echo "  REMOTE_MACHINE...   Any number of names of docker-machines with remote"
	echo "                      slave servers to use for distributed testing."
	echo "                      If unset, the test is run locally."
	echo "  Options:"
    echo "    -p key=value ...  Properties; set both locally, on the controller"
    echo "                      client, as globally, on the slave servers."
	echo
	echo "$(basename $0) server ACTION MACHINE[...]"
	echo "  Manage remote JMeter slave servers."
	echo "  ACTION   Either start, stop, or restart."
	echo "  MACHINE  One or more targeted docker-machines."
	echo
	echo "$(basename $0) perfmon ACTION MACHINE[...]"
	echo "  Manage the PerfMon Server Agent on application servers."
	echo "  ACTION   Either start, stop, or restart."
	echo "  MACHINE  One or more targeted docker-machines."
	echo
	echo "$(basename $0) help"
	echo "  Display this message."
	echo
}

while getopts "p:h" opt; do
    case $opt in
        p  ) PROPERTIES+=("$OPTARG");;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
shift $((OPTIND -1))

parallel ()
{
	COMMAND="$1"
	ACTION="$2"
	shift 2
	MACHINES="$*"
	for machine in ${MACHINES}; do
		${COMMAND} ${ACTION} ${machine} &
	done
	wait
}

server ()
{
	action="$1"
	machine="$2"
	run="docker-machine ssh ${machine}"
	$run "docker start slave" &>/dev/null
	test_err="$?"
	if [ "$action" = "start" ]; then
		if [ "$test_err" = "0" ]; then
			echo "(${machine}) already running"
		else
			$run "sudo ufw allow 1099 && sudo ufw reload" &>/dev/null
			ip=$(docker-machine ip ${machine})
			start="$run docker run --rm --detach --publish 1099:1099 --name slave --env IP=$ip wscherphof/jmeter:3.2"
			echo "(${machine}) $(${start})"
		fi
	elif [ "$action" = "stop" ]; then
		if [ "$test_err" != "0" ]; then
			echo "(${machine}) not running"
		else
			stop="$run docker kill slave"
			echo "(${machine}) $(${stop})"
			$run "sudo ufw deny 1099 && sudo ufw reload" &>/dev/null
		fi
	elif [ "$action" = "restart" ]; then
		$0 server stop ${machine}
		$0 server start ${machine}
	else
		usage; exit 1
	fi
}

perfmon ()
{
	action="$1"
	machine="$2"
	perfmon_version="2.2.1"
	run="docker-machine ssh ${machine}"
	$run "sudo ls ServerAgent-${perfmon_version}" &>/dev/null
	if [ "$?" != "0" ]; then
		echo "(${machine}) installing..."
		home="$($run pwd)"
		$run docker run --rm --name perfmon --volume ${home}:/dst wscherphof/perfmon:${perfmon_version}
	fi
	$run "nc -z localhost 4444" &>/dev/null
	test_err="$?"
	if [ "$action" = "start" ]; then
		if [ "$test_err" = "0" ]; then
			echo "(${machine}) already running"
		else
			$run "sudo ufw allow 4444 && sudo ufw reload" &>/dev/null
			$run "sudo ServerAgent-${perfmon_version}/startAgent.sh --sysinfo >perfmon.log &"
			echo "(${machine}) PerfMon Server Agent started"
		fi
	elif [ "$action" = "stop" ]; then
		if [ "$test_err" != "0" ]; then
			echo "(${machine}) not running"
		else
			$run "{ echo shutdown; sleep 1; } | telnet localhost 4444" &>/dev/null
			$run "sudo ufw deny 4444 && sudo ufw reload" &>/dev/null
			echo "(${machine}) PerfMon Server Agent stopped"
		fi
	elif [ "$action" = "restart" ]; then
		$0 perfmon stop ${machine}
		$0 perfmon start ${machine}
	else
		usage; exit 1
	fi
}

case "$1" in

run)
	JMX="$2"
	MACHINE="$3"
	shift 3
	REMOTE_MACHINES="$*"
	REMOTE_HOSTS=""
	for server in ${REMOTE_MACHINES}; do
		ip=$(docker-machine ip ${server})
		REMOTE_HOSTS="${ip} ${REMOTE_HOSTS}"
	done
	props=""
	for p in "${PROPERTIES[@]}"; do
        props="${props} -p ${p}"
	done		
	echo "* starting test..."
	docker-machine scp ${JMX} ${MACHINE}:jmx 1>/dev/null
	run="docker-machine ssh ${MACHINE}"
	home="$($run pwd)"
	$run "sudo ufw allow 60000 && sudo ufw reload" &>/dev/null
	$run docker run --rm --name master \
		--env IP=$(docker-machine ip ${MACHINE}) \
		--volume ${home}/jmx:/jmx \
		--volume ${home}/results:/results \
		--publish 60000:60000 \
		wscherphof/jmeter:3.2 \
		${props} \
		master ${REMOTE_HOSTS}
	code="$?"
	echo "* fetching results..."
	dst="./jmeter-test/$(date "+%Y-%m-%d/%H.%M.%S")"
	mkdir -p ${dst}
	$run tar -czf results.tar.gz results
	docker-machine scp ${MACHINE}:results.tar.gz ${dst} 1>/dev/null
	pushd ${dst} 1>/dev/null
	tar -xzf results.tar.gz
	mv results/* . && rm -r results
	rm results.tar.gz
	popd 1>/dev/null
	if [ "$code" = "0" ]; then
		echo "* results saved in ${dst}"
	else
		echo "* logs saved in ${dst}"
		exit ${code}
	fi
;;

server)
	parallel $*
;;

perfmon)
	parallel $*
;;

help)
	usage; exit 0
;;

*)
	usage; exit 1
;;

esac
