#!/bin/bash

usage ()
{
	echo
	echo "Manage Apache JMeter (distributed) load tests."
	echo
	echo "Prerequitites:"
	echo "  - Docker & Docker Machine installed: https://docs.docker.com/machine/"
	echo "  - A test plan definition .jmx file created with JMeter 3.2: http://jmeter.apache.org/"
	echo
	echo "Usage:"
	echo
	echo "$(basename $0) [OPTIONS] run JMX MACHINE [REMOTE_MACHINE...]"
	echo "  Run the given test in non-gui mode, locally or remote, generating"
	echo "  a dashboard report."
	echo "  JMX                 Path to the .jmx file."
	echo "  MACHINE             The docker-machine that should run the test."
	echo "  REMOTE_MACHINE...   Any number of names of docker-machines with remote"
	echo "                      slave servers to use for distributed testing."
	echo "                      If unset, the test is run locally."
	echo "  Options:"
    echo "    -e key=value ...  environment variables"
	echo
	echo "$(basename $0) server ACTION MACHINE[...]"
	echo "  Manage remote JMeter slave servers."
	echo "  ACTION   Either start, stop, or restart."
	echo "  MACHINE  One or more targeted docker-machines."
	echo
	echo "$(basename $0) perfmon ACTION MACHINE[...]"
	echo "  Manage the PerfMon Server Agent on application servers."
	echo "  ACTION   Either start, stop, or restart."
	echo "  MACHINE  One or more targeted docker-machines."
	echo
	echo "$(basename $0) help"
	echo "  Display this message."
	echo
}

while getopts "e:h" opt; do
    case $opt in
        e  ) ENVS+=("$OPTARG");;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
shift $((OPTIND -1))

absolute ()
{
	base=$(basename $1)
	dir=$(dirname $1)
	dir=$(cd $dir ; pwd)
	echo "$dir/$base"
}

parallel ()
{
	COMMAND="$1"
	ACTION="$2"
	shift 2
	MACHINES="$*"
	for machine in ${MACHINES}; do
		${COMMAND} ${ACTION} ${machine} &
	done
	wait
}

report ()
{
	action="$1"
	machine="$2"
	echo "(${machine}) $(${action})"
}

perfmon ()
{
	action="$1"
	machine="$2"
	run="docker-machine ssh ${machine}"
	start="$run docker run --rm --detach --publish 4444:4444 --name perfmon wscherphof/perfmon:2.2.1"
	stop="$run docker kill perfmon"
	if [ "$action" = "start" ]; then
		$run "sudo ufw allow 4444 && sudo ufw reload" 2>/dev/null
		report "$start" "$machine"
	elif [ "$action" = "stop" ]; then
		report "$stop" "$machine"
		$run "sudo ufw deny 4444 && sudo ufw reload" 2>/dev/null
	elif [ "$action" = "restart" ]; then
		report "$stop" "$machine"
		report "$start" "$machine"
	else
		usage; exit 1
	fi
}

server ()
{
	action="$1"
	machine="$2"
	run="docker-machine ssh ${machine}"
	stop="$run docker kill slave"
	if [ "$action" = "stop" ]; then
		report "$stop" "$machine"
		$run "sudo ufw deny 1099 && sudo ufw reload" 2>/dev/null
	else
		ip=$(docker-machine ip ${machine})
		start="$run docker run --rm --detach --publish 1099:1099 --name slave --env IP=$ip wscherphof/jmeter:3.2"
		if [ "$action" = "restart" ]; then
		report "$stop" "$machine"
		report "$start" "$machine"
		elif [ "$action" = "start" ]; then
			$run "sudo ufw allow 1099 && sudo ufw reload" 2>/dev/null
		report "$start" "$machine"
		else
			usage; exit 1
		fi
	fi
}

case "$1" in

run)
	JMX="$2"
	MACHINE="$3"
	docker-machine scp $(absolute ${JMX}) ${MACHINE}:jmx >/dev/null

	shift 3
	REMOTE_MACHINES="$*"
	REMOTE_HOSTS=""
	for server in ${REMOTE_MACHINES}; do
		ip=$(docker-machine ip ${server})
		REMOTE_HOSTS="${ip} ${REMOTE_HOSTS}"
	done

    environment="--env IP=$(docker-machine ip ${MACHINE})"
    for env in "${ENVS[@]}"; do
        environment="${environment} --env ${env}"
    done

	echo "* starting test..."
	run="docker-machine ssh ${MACHINE}"
	$run "sudo ufw allow 60000 && sudo ufw reload" 2>/dev/null
	$run docker run --rm --name master \
		${environment} \
		--volume /home/docker/jmx:/jmx \
		--volume /home/docker/results:/results \
		--publish 60000:60000 \
		wscherphof/jmeter:3.2 \
		master ${REMOTE_HOSTS}

	code="$?"

	DIR="./jmeter-test/$(date "+%Y-%m-%d/%H.%M.%S")"
	mkdir -p ${DIR}

	docker-machine scp -r ${MACHINE}:results $(absolute ${DIR}) >/dev/null
	if [ "$code" = "0" ]; then
		echo "* results saved in ${DIR}"
	else
		echo "* logs saved in ${DIR}"
		exit ${code}
	fi
;;

perfmon)
	parallel $*
;;

server)
	parallel $*
;;

help)
	usage; exit 0
;;

*)
	usage; exit 1
;;

esac
