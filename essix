#!/bin/bash

usage ()
{
	echo
	echo "Usage:"
	echo
	echo "$(basename $0) [OPTIONS] build SOURCEDIR IMAGE [SERVICE SWARM]"
	echo "  Format & compile go sources, and build a Docker image."
	echo "  Without the SERVICE and SWARM arguments, the image is built locally,"
	echo "  and pushed to the repository."
	echo "  With the SERVICE and SWARM arguments, the image is built remotely"
	echo "  on each of the swarm's nodes, and the service is run there."
	echo
	echo "$(basename $0) [OPTIONS] run IMAGE SERVICE SWARM"
	echo "  Run a service from an image on a swarm."
	echo
	echo "$(basename $0) help"
	echo "  Display this message."
	echo
	echo "SOURCEDIR  directory containing the sources to compile"
	echo "IMAGE      repo/name:tag identifying the image"
	echo "SERVICE    name for the service to run"
	echo "SWARM      name of the swarm where to run the service"
	echo
	echo "Options:"
    echo "  -e key=value ...  environment variables"
    echo "  -r replicas       number of replicas to run (default: 1)"
	echo
	echo "Examples:"
    echo "  \$ $(basename $0) -e DOMAIN=dev.wscherphof.nl build ../s6app wscherphof/s6app:0.2 s6app dev"
    echo "      Builds a 0.2 version of the wscherphof/s6app image on swarm dev's"
    echo "      nodes, and runs the s6app service on dev, with the DOMAIN variable"
    echo "      set to the given value."
    echo "  \$ $(basename $0) build ../s6app wscherphof/s6app:0.2 s6app"
    echo "      Locally builds a 0.2 version of the wscherphof/s6app image,"
    echo "      and pushes it to the repository."
    echo "  \$ $(basename $0) run wscherphof/s6app:0.2 s6app prd"
    echo "      Runs the s6app service on swarm prd, using the specified image,"
    echo "      which is downloaded from the repository, if not found locally."
	echo
}

while getopts "e:r:s:h" opt; do
    case $opt in
        e  ) ENVS+=("$OPTARG");;
        r  ) REPLICAS="$OPTARG";;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
shift $((OPTIND -1))

REPLICAS="${REPLICAS-1}"

essix="$(dirname $0)"
if [ "$essix" = "." ]; then
	essix="$PWD"
fi
build="${essix}/vendor/github.com/wscherphof/rethinkswarmmode/go/build"
app="${essix}/vendor/github.com/wscherphof/rethinkswarmmode/app"

run ()
{
    environment=""
    for env in "${ENVS[@]}"; do
        environment="${environment} -e ${env}"
    done
	${app} -p 80 -p 443 ${environment} -r ${REPLICAS} ${SERVICE} ${TAG} ${SWARM}
}

COMMAND="$1"
if [ "$COMMAND" = "build" ]; then
	SOURCEDIR="$2"
	TAG="$3"
	SERVICE="$4"
	SWARM="$5"

	succeed ()
	{
		code="${1-$?}"
		if [ "$code" != "0" ]; then
			exit $code
		fi
	}

	pushd "$SOURCEDIR" 1>/dev/null
	succeed

	mkdir -p ./.merge/resources
	succeed
	cp -rf ${essix}/resources/ ./.merge/resources/
	succeed
	cp -rf ./resources/ ./.merge/resources/
	succeed

	${build} -p 80 -p 443 -a ./.merge/resources . ${TAG} ${SWARM}
	build_code="$?"

	rm -rf ./.merge 2>/dev/null
	popd 1>/dev/null

	if [ "$SERVICE" -a "$SWARM" ]; then
		succeed $build_code
		run
	fi
elif [ "$COMMAND" = "run" ]; then
	TAG="$2"
	SERVICE="$3"
	SWARM="$4"
	if [ "$TAG" -a "$SERVICE" -a "$SWARM" ]; then
		run
	else
		usage; exit 1
	fi
elif [ "$COMMAND" = "help" ]; then
	usage; exit
else
	usage; exit 1
fi
