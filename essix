#!/bin/bash

usage ()
{
	echo
	echo "Usage:"
	echo
	echo "$(basename $0) [OPTIONS] build SOURCEDIR IMAGE [SERVICE SWARM]"
	echo "  Format & compile go sources, build a Docker image, either"
	echo "  locally, and push it to the repository,"
	echo "  or remotely on the swarm's nodes, and run the service there."
	echo
	echo "$(basename $0) [OPTIONS] run IMAGE SERVICE SWARM"
	echo "  Run a service from an image on a swarm."
	echo
	echo "$(basename $0) help"
	echo "  Display this message."
	echo
	echo "SOURCEDIR  directory containing the sources to compile"
	echo "IMAGE      repo/name:tag identifying the image"
	echo "SERVICE    name for the service to run"
	echo "SWARM      name of the swarm where to run the service"
	echo
	echo "Options:"
    echo "  -e key=value ...  environment variables"
    echo "  -r replicas       number of replicas to run (default: 1)"
	echo "  -s swarmmode      path to the local github.com/wscherphof/rethinkswarmmode repo (default=$GOPATH/src/github.com/wscherphof/rethinkswarmmode)"
	echo
}

while getopts "e:r:s:h" opt; do
    case $opt in
        e  ) ENVS+=("$OPTARG");;
        r  ) REPLICAS="$OPTARG";;
        s  ) SWARMMODE="$OPTARG";;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
shift $((OPTIND -1))

go get github.com/wscherphof/rethinkswarmmode &>/dev/null
SWARMMODE="${SWARMMODE-${GOPATH}/src/github.com/wscherphof/rethinkswarmmode}"
BUILD="${SWARMMODE}/go/build"
APP="${SWARMMODE}/app"
REPLICAS="${REPLICAS-1}"

run ()
{
    ENVIRONMENT=""
    for env in "${ENVS[@]}"; do
        ENVIRONMENT="${ENVIRONMENT} -e ${env}"
    done
	${APP} -p 80 -p 443 ${ENVIRONMENT} -r ${REPLICAS} ${SERVICE} ${TAG} ${SWARM}
}

COMMAND="$1"
if [ "$COMMAND" = "build" ]; then
	SOURCEDIR="$2"
	TAG="$3"
	SERVICE="$4"
	SWARM="$5"

	essix="$(dirname $0)"
	if [ "$essix" = "." ]; then
		essix="$PWD"
	fi

	continue ()
	{
		code="${1-$?}"
		if [ "$code" != "0" ]; then
			exit $code
		fi
	}

	pushd "$SOURCEDIR" 1>/dev/null
	continue

	mkdir -p ./.merge/resources
	continue
	cp -rf ${essix}/resources/ ./.merge/resources/
	continue
	cp -rf ./resources/ ./.merge/resources/
	continue

	${BUILD} -p 80 -p 443 -a ./.merge/resources . ${TAG} ${SWARM}
	code="$?"

	rm -rf ./.merge 2>/dev/null
	popd 1>/dev/null

	if [ "$SERVICE" -a "$SWARM" ]; then
		continue $code
		run
	fi
elif [ "$COMMAND" = "run" ]; then
	TAG="$2"
	SERVICE="$3"
	SWARM="$4"
	if [ "$TAG" -a "$SERVICE" -a "$SWARM" ]; then
		run
	else
		usage; exit 1
	fi
elif [ "$COMMAND" = "help" ]; then
	usage; exit
else
	usage; exit 1
fi
